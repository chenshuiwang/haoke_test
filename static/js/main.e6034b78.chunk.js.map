{"version":3,"sources":["utils/bdMapHelper.js","store/actionCreator/index.js","App.js","store/reducer/mapReducer.js","store/reducer/index.js","store/index.js","index.js"],"names":["BMap","window","BMAP_STATUS_SUCCESS","getPoint","cityName","address","Promise","resole","reject","Geocoder","point","getLocalCityAction","dispatch","a","Geolocation","getCurrentPosition","r","this","getStatus","city","name","Point","lng","lat","getLocation","rs","addressComponents","replace","res","type","value","getPointAction","clearCityAction","MapFound","lazy","Home","CitySelect","Loading","App","props","initCity","className","fallback","component","path","exact","to","Component","connect","state","mapReducer","defaultState","combineReducers","action","newState","JSON","parse","stringify","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"+NAAMA,EAAOC,OAAOD,KACdE,EAAsBD,OAAOC,oBA2CtBC,EAAW,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACjC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GACnBH,IACDA,EAAUD,IAEF,IAAIJ,EAAKS,UACfN,SAASE,GAAS,SAAUK,GAC1BA,EACAH,IAEAC,MAGJJ,OCxDCO,EAAqB,WAC9B,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEDcA,IAAIP,SAAQ,SAACC,EAAQC,IACN,IAAIR,EAAKc,aACfC,oBAAmB,SAAUC,GACrC,GAAIC,KAAKC,cAAgBhB,EACrB,GAAKc,EAAEX,QAAQc,KAUXZ,EAAO,CAEHa,KAAM,eACNV,MAAOM,EAAEN,YAbI,CACjB,IAAIA,EAAQ,IAAIT,OAAOD,KAAKqB,MAAML,EAAEN,MAAMY,IAAKN,EAAEN,MAAMa,MAC5C,IAAItB,OAAOD,KAAKS,UACtBe,YAAYd,GAAO,SAAUe,GAC9BlB,EAAO,CACHa,KAAMK,EAAGC,kBAAkBP,KAAKQ,QAAQ,SAAK,IAC7CjB,kBAYZF,EAAOQ,SCpCZ,OACGY,EADH,OAEHhB,EAAS,CACLiB,KAAM,WACNC,MAAOF,IAJR,2CAAP,uDASSG,EAAiB,SAAC3B,GAC3B,8CAAO,WAAOQ,GAAP,eAAAC,EAAA,sEACiBV,EAAS,CAACC,aAD3B,OACGM,EADH,OAMHE,EAAS,CACLiB,KAAM,WACNC,MANQ,CACRV,KAAMhB,EACNM,WAJD,2CAAP,uDAcSsB,EAAkB,WAC3B,MAAO,CACHH,KAAM,e,qOCpBRI,EAAWC,gBAAK,kBAAM,+DACtBC,EAAOD,gBAAK,kBAAM,+DAClBE,EAAaF,gBAAK,kBAAM,sEACxBG,EAAU,kBAAM,+BAEhBC,E,kLAEFrB,KAAKsB,MAAMC,a,+BAGX,OACE,yBAAKC,UAAU,OACZxB,KAAKsB,MAAMnC,UACV,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUsC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,CAAOC,UAAWR,EAAMS,KAAK,UAC7B,kBAAC,IAAD,CAAOA,KAAK,IAAIC,OAAK,GACnB,kBAAC,IAAD,CAAUC,GAAG,WAEf,kBAAC,IAAD,CAAOH,UAAWV,EAAUW,KAAK,YAAYC,OAAK,IAClD,kBAAC,IAAD,CAAOF,UAAWP,EAAYQ,KAAK,cAAcC,OAAK,W,GAflDE,aAoCHC,eAdS,SAACC,GACvB,MAAO,CACL7C,SAAU6C,EAAMC,WAAW/B,KAAKC,SAKV,SAACR,GACzB,MAAO,CACL4B,SADK,WAEH5B,EAASD,mBAIAqC,CAA4CV,GCjDrDa,EAAe,CACjBhC,KAAM,I,OCCKiC,cAAgB,CAACF,WDCjB,WAAgC,IAA/BD,EAA8B,uDAAxBE,EAAaE,EAAW,uCACtCC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUR,IACzC,OAAQI,EAAOxB,MACX,IAAK,WAED,OADAyB,EAASnC,KAAOkC,EAAOvB,MAChBwB,EACX,IAAK,YAED,OADAA,EAASnC,KAAO,GACTmC,EAIf,OAAOL,K,QEXIS,cAAYC,EAAQC,YAAgBC,MCInDC,IAASC,OAAO,kBAAC,IAAD,CAAUC,MAAOA,GAAO,kBAAC,EAAD,OAAmBC,SAASC,eAAe,W","file":"static/js/main.e6034b78.chunk.js","sourcesContent":["const BMap = window.BMap;\r\nconst BMAP_STATUS_SUCCESS = window.BMAP_STATUS_SUCCESS;\r\n// var myCity = new window.BMap.LocalCity();\r\n//     myCity.get((result) => {\r\n//     console.log(result)\r\n// }); \r\n// export const getLocalCity = () => {\r\n//     return new Promise((resole, reject) => {\r\n//         const myCity = new window.BMap.LocalCity();\r\n//         myCity.get((result) => {\r\n//             resole(result)\r\n//         });\r\n//     })\r\n// }\r\n\r\nexport const getCurrentCity = () => {\r\n    return new Promise((resole, reject) => {\r\n        var geolocation = new BMap.Geolocation();\r\n        geolocation.getCurrentPosition(function (r) {\r\n            if (this.getStatus() === BMAP_STATUS_SUCCESS) {\r\n                if (!r.address.city) {\r\n                    var point = new window.BMap.Point(r.point.lng, r.point.lat);\r\n                    var geoc = new window.BMap.Geocoder();\r\n                    geoc.getLocation(point, function (rs) {\r\n                        resole({\r\n                            name: rs.addressComponents.city.replace('市', ''),\r\n                            point\r\n                        })\r\n                    });\r\n                } else {\r\n                    resole({\r\n                        // name: r.address.city.replace('市', ''),\r\n                        name: '广州',\r\n                        point: r.point\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                reject(r)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport const getPoint = ({ cityName, address }) => {\r\n    return new Promise((resole, reject) => {\r\n        if (!address) {\r\n            address = cityName\r\n        }\r\n        var myGeo = new BMap.Geocoder();\r\n        myGeo.getPoint(address, function (point) {\r\n            if (point) {\r\n                resole()\r\n            } else {\r\n                reject()\r\n            }\r\n        },\r\n            cityName);\r\n    })\r\n}","import { getCurrentCity,getPoint } from \"../../utils/bdMapHelper\";\r\nexport const getLocalCityAction = () => {\r\n    return async (dispatch) => {\r\n        const res = await getCurrentCity();\r\n        dispatch({\r\n            type: 'initCity',\r\n            value: res\r\n        })\r\n    }\r\n}\r\n// 获取当前城市名称\r\nexport const getPointAction = (cityName) => {\r\n    return async (dispatch) => {\r\n        const point = await getPoint({cityName});\r\n        const res = {\r\n            name: cityName,\r\n            point\r\n        }\r\n        dispatch({\r\n            type: 'initCity',\r\n            value: res\r\n        })\r\n    }\r\n}\r\n\r\n// 清空当前城市\r\nexport const clearCityAction = () =>{\r\n    return {\r\n        type: 'clearCity'\r\n    }\r\n}","import React, { Component, lazy, Suspense } from 'react';\nimport { connect } from \"react-redux\";\nimport { getLocalCityAction } from \"./store/actionCreator\";\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nconst MapFound = lazy(() => import('./pages/mapFound'))\nconst Home = lazy(() => import('./pages/home'))\nconst CitySelect = lazy(() => import('./pages/citySelect'))\nconst Loading = () => <div></div>\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.initCity();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.props.cityName &&\n          <Router>\n            <Suspense fallback={<Loading/>}>\n              <Route component={Home} path='/home'></Route>\n              <Route path='/' exact>\n                <Redirect to='/home'></Redirect>\n              </Route>\n              <Route component={MapFound} path='/mapFound' exact></Route>\n              <Route component={CitySelect} path='/citySelect' exact></Route>\n            </Suspense>\n          </Router>}\n      </div>);\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cityName: state.mapReducer.city.name\n  }\n}\n\n// 将action映射到组件的props当中\nconst mapDispathToProps = (dispatch) => {\n  return {\n    initCity() {\n      dispatch(getLocalCityAction())\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispathToProps)(App);\n","const defaultState = {\r\n    city: {}\r\n}\r\nexport default (state=defaultState,action) => {\r\n    let newState = JSON.parse(JSON.stringify(state))\r\n    switch (action.type) {\r\n        case 'initCity':\r\n            newState.city = action.value;\r\n            return newState;\r\n        case 'clearCity':\r\n            newState.city = {};\r\n            return newState;\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n}","import mapReducer from './mapReducer'\r\nimport { combineReducers } from \"redux\";\r\nexport default combineReducers({mapReducer});","import reducer from './reducer'\r\nimport { createStore,applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\n\r\nexport default createStore(reducer,applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/fonts/iconfont.css'\nimport App from './App';\nimport store from './store'\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(<Provider store={store}><App /></Provider>,document.getElementById('root'));"],"sourceRoot":""}